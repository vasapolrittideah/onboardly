// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator types {
  provider = "prisma-types-export"
  output   = "../types"
}

model User {
  id           Int        @id @default(autoincrement())
  fullName     String
  passwordHash String?
  emails       Email[]    @relation("userEmail")
  providers    Provider[] @relation("userProvider")
  sessions     Session[]  @relation("userSession")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Email {
  id               Int               @id @default(autoincrement())
  address          String            @unique
  userId           Int               @unique
  user             User              @relation("userEmail", fields: [userId], references: [id])
  isVerified       Boolean           @default(false)
  verificationCode VerificationCode? @relation("emailVerificationCode")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId], name: "userEmailId")
}

model Provider {
  id         Int          @id @default(autoincrement())
  provider   AuthProvider
  providerId String
  userId     Int          @unique
  user       User         @relation("userProvider", fields: [userId], references: [id])
  createdAt  DateTime     @default(now())
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  email     Email    @relation("emailVerificationCode", fields: [emailId], references: [id])
  emailId   Int      @unique
  createdAt DateTime @default(now())

  @@index([emailId], name: "emailVerificationCodeId")
}

model Session {
  id              Int      @id @default(autoincrement())
  ipAddress       String
  token           String
  userAgent       String?
  browser         String?
  operatingSystem String?
  user            User     @relation("userSession", fields: [userId], references: [id])
  userId          Int      @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId], name: "userSessionId")
}

enum AuthProvider {
  GOOGLE
  LINKEDIN
}
