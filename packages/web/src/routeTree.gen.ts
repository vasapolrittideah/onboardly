/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index.route'

// Create Virtual Routes

const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const ProtectedAboutLazyImport = createFileRoute('/_protected/about')()

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRouteRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const ProtectedAboutLazyRoute = ProtectedAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/about.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/about': {
      id: '/_protected/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof ProtectedAboutLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedAboutLazyRoute: typeof ProtectedAboutLazyRoute
  ProtectedIndexRouteRoute: typeof ProtectedIndexRouteRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAboutLazyRoute: ProtectedAboutLazyRoute,
  ProtectedIndexRouteRoute: ProtectedIndexRouteRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/about': typeof ProtectedAboutLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/': typeof ProtectedIndexRouteRoute
}

export interface FileRoutesByTo {
  '/about': typeof ProtectedAboutLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/': typeof ProtectedIndexRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/about': typeof ProtectedAboutLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/_protected/': typeof ProtectedIndexRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/auth/login' | '/auth/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/auth/login' | '/auth/register' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/about'
    | '/auth/login'
    | '/auth/register'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/about",
        "/_protected/"
      ]
    },
    "/_protected/about": {
      "filePath": "_protected/about.lazy.tsx",
      "parent": "/_protected"
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.lazy.tsx"
    },
    "/_protected/": {
      "filePath": "_protected/index.route.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
